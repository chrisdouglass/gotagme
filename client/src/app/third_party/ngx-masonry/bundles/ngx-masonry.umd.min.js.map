{"version":3,"file":"ngx-masonry.umd.min.js","sources":["~/ngx-masonry/src/app/ngx-masonry/ngx-masonry.component.ts","~/ngx-masonry/src/app/ngx-masonry/ngx-masonry.directive.ts","~/ngx-masonry/src/app/ngx-masonry/ngx-masonry.module.ts"],"sourcesContent":["import {\n  Component,\n  OnInit,\n  OnChanges,\n  SimpleChanges,\n  OnDestroy,\n  Input,\n  Output,\n  ElementRef,\n  EventEmitter,\n  PLATFORM_ID,\n  Inject\n} from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\n\ndeclare var require: any;\nvar /** @type {?} */ imagesLoaded: any = undefined;\nvar /** @type {?} */ masonryConstructor: any = undefined;\n\nimport { NgxMasonryOptions } from './ngx-masonry-options.interface';\nexport class NgxMasonryComponent implements OnInit, OnChanges, OnDestroy {\n/**\n * @param {?} platformId\n * @param {?} _element\n */\nconstructor(\nprivate platformId: any,\nprivate _element: ElementRef) {}\npublic _msnry: any;\npublic options: NgxMasonryOptions;\npublic useImagesLoaded: Boolean = false;\n   updateLayout: Boolean = false;\n\n  // Outputs\n   layoutComplete: EventEmitter<any[]> = new EventEmitter<any[]>();\n   removeComplete: EventEmitter<any[]> = new EventEmitter<any[]>();\n/**\n * @return {?}\n */\nngOnInit() {\n    ///TODO: How to load imagesloaded only if this.useImagesLoaded===true?\n    if (this.useImagesLoaded && imagesLoaded === undefined) {\n      imagesLoaded = require('imagesloaded');\n    }\n\n    if (isPlatformBrowser(this.platformId) && masonryConstructor === undefined) {\n      masonryConstructor = require('masonry-layout');\n    }\n\n    // Create masonry options object\n    if (!this.options) this.options = {};\n\n    // Set default itemSelector\n    if (!this.options.itemSelector) {\n      this.options.itemSelector = '[ngx-masonry-item], ngx-masonry-item';\n    }\n\n    if (isPlatformBrowser(this.platformId)) {\n      // Initialize Masonry\n      this._msnry = new masonryConstructor(this._element.nativeElement, this.options);\n\n      // Bind to events\n      this._msnry.on('layoutComplete', (items: any) => {\n        this.layoutComplete.emit(items);\n      });\n      this._msnry.on('removeComplete', (items: any) => {\n        this.removeComplete.emit(items);\n      });\n    }\n  }\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: SimpleChanges) {\n    // only update layout if it's not the first change\n    if (changes.updateLayout) {\n      if (!changes.updateLayout.firstChange) {\n        this.layout();\n      }\n    }\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    if (this._msnry) {\n      this._msnry.destroy();\n    }\n  }\n/**\n * @return {?}\n */\npublic layout() {\n    setTimeout(() => {\n      this._msnry.layout();\n    });\n  }\n/**\n * @return {?}\n */\npublic reloadItems() {\n    setTimeout(() => {\n      this._msnry.reloadItems();\n    });\n  }\n/**\n * @param {?} element\n * @return {?}\n */\npublic add(element: HTMLElement) {\n    var /** @type {?} */ isFirstItem = false;\n\n    // Check if first item\n    if (this._msnry.items.length === 0) {\n      isFirstItem = true;\n    }\n\n    if (this.useImagesLoaded) {\n      imagesLoaded(element, (instance: any) => {\n        this._element.nativeElement.appendChild(element);\n\n        // Tell Masonry that a child element has been added\n        this._msnry.appended(element);\n\n        // layout if first item\n        if (isFirstItem) this.layout();\n      });\n\n      this._element.nativeElement.removeChild(element);\n    } else {\n      // Tell Masonry that a child element has been added\n      this._msnry.appended(element);\n\n      // layout if first item\n      if (isFirstItem) this.layout();\n    }\n  }\n/**\n * @param {?} element\n * @return {?}\n */\npublic remove(element: HTMLElement) {\n    // Tell Masonry that a child element has been removed\n    this._msnry.remove(element);\n\n    // Layout items\n    this.layout();\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: '[ngx-masonry], ngx-masonry',\n  template: '<ng-content></ng-content>',\n  styles: [\n    `\n\t\t:host {\n\t\t\tdisplay: block;\n\t\t}\n\t`\n  ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID, ] }, ]},\n{type: ElementRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'options': [{ type: Input },],\n'useImagesLoaded': [{ type: Input },],\n'updateLayout': [{ type: Input },],\n'layoutComplete': [{ type: Output },],\n'removeComplete': [{ type: Output },],\n};\n}\n\nfunction NgxMasonryComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nNgxMasonryComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNgxMasonryComponent.ctorParameters;\n/** @type {?} */\nNgxMasonryComponent.propDecorators;\n/** @type {?} */\nNgxMasonryComponent.prototype._msnry;\n/** @type {?} */\nNgxMasonryComponent.prototype.options;\n/** @type {?} */\nNgxMasonryComponent.prototype.useImagesLoaded;\n/** @type {?} */\nNgxMasonryComponent.prototype.updateLayout;\n/** @type {?} */\nNgxMasonryComponent.prototype.layoutComplete;\n/** @type {?} */\nNgxMasonryComponent.prototype.removeComplete;\n/** @type {?} */\nNgxMasonryComponent.prototype.platformId;\n/** @type {?} */\nNgxMasonryComponent.prototype._element;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Directive, Inject, ElementRef, forwardRef, OnDestroy, AfterViewInit, PLATFORM_ID } from '@angular/core';\n\nimport { NgxMasonryComponent } from './ngx-masonry.component';\nimport { isPlatformBrowser } from '@angular/common';\n\ninterface MutationWindow extends Window {\n\tMutationObserver: any;\n\tWebKitMutationObserver: any;\n}\n\ndeclare var window: MutationWindow;\nexport class NgxMasonryDirective implements OnDestroy, AfterViewInit {\n/**\n * @param {?} _element\n * @param {?} _parent\n * @param {?} platformId\n */\nconstructor(\nprivate _element: ElementRef,\nprivate _parent: NgxMasonryComponent,\nprivate platformId: any\n\t) {}\n/**\n * @return {?}\n */\nngAfterViewInit() {\n\t\tif (isPlatformBrowser(this.platformId)) {\n\t\t\tthis._parent.add(this._element.nativeElement);\n\t\t\tthis.watchForHtmlChanges();\n\t\t}\n\t}\n/**\n * @return {?}\n */\nngOnDestroy() {\n\t\tif (isPlatformBrowser(this.platformId)) {\n\t\t\tthis._parent.remove(this._element.nativeElement);\n\t\t}\n\t}\n/**\n * When HTML in brick changes dinamically, observe that and change layout\n * @return {?}\n */\nprivate watchForHtmlChanges(): void {\n\t\tMutationObserver = window.MutationObserver || window.WebKitMutationObserver;\n\n\t\tif (MutationObserver) {\n/**\n * Watch for any changes to subtree\n */\nlet self = this;\n\t\t\tlet /** @type {?} */ observer = new MutationObserver(function(mutations, observerFromElement) {\n\t\t\t\tself._parent.layout();\n\t\t\t});\n\n\t\t\t// define what element should be observed by the observer\n\t\t\t// and what types of mutations trigger the callback\n\t\t\tobserver.observe(this._element.nativeElement, {\n\t\t\t\tsubtree: true,\n\t\t\t\tchildList: true\n\t\t\t});\n\t\t}\n\t}\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n\tselector: '[ngx-masonry-item], ngx-masonry-item'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: NgxMasonryComponent, decorators: [{ type: Inject, args: [forwardRef(() => NgxMasonryComponent), ] }, ]},\n{type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID, ] }, ]},\n];\n}\n\nfunction NgxMasonryDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nNgxMasonryDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNgxMasonryDirective.ctorParameters;\n/** @type {?} */\nNgxMasonryDirective.prototype._element;\n/** @type {?} */\nNgxMasonryDirective.prototype._parent;\n/** @type {?} */\nNgxMasonryDirective.prototype.platformId;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n/*-- ngx-masonry --*/\n\nimport { NgxMasonryComponent } from './ngx-masonry.component';\nimport { NgxMasonryDirective } from './ngx-masonry.directive';\nexport class NgxMasonryModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n\timports: [\n\t\tCommonModule\n\t],\n\texports: [\n\t\tNgxMasonryComponent,\n\t\tNgxMasonryDirective\n\t],\n\tdeclarations: [\n\t\tNgxMasonryComponent,\n\t\tNgxMasonryDirective\n\t]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction NgxMasonryModule_tsickle_Closure_declarations() {\n/** @type {?} */\nNgxMasonryModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNgxMasonryModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"],"names":["imagesLoaded","undefined","masonryConstructor","NgxMasonryComponent","platformId","_element","this","useImagesLoaded","updateLayout","layoutComplete","EventEmitter","removeComplete","prototype","ngOnInit","_this","require","isPlatformBrowser","options","itemSelector","_msnry","nativeElement","on","items","emit","ngOnChanges","changes","firstChange","layout","ngOnDestroy","destroy","setTimeout","reloadItems","add","element","isFirstItem","length","instance","appendChild","appended","removeChild","remove","decorators","type","Component","args","selector","template","styles","ctorParameters","Inject","PLATFORM_ID","ElementRef","propDecorators","Input","Output","NgxMasonryDirective","_parent","ngAfterViewInit","watchForHtmlChanges","MutationObserver","window","WebKitMutationObserver","self_1","mutations","observerFromElement","observe","subtree","childList","Directive","forwardRef","NgxMasonryModule","NgModule","imports","CommonModule","exports","declarations"],"mappings":"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"}
