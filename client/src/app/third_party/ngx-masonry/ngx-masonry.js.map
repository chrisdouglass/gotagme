{"version":3,"file":"ngx-masonry.js","sources":["ts/ngx-masonry.ts","ts/src/app/ngx-masonry/ngx-masonry.module.ts","ts/src/app/ngx-masonry/ngx-masonry.directive.ts","ts/src/app/ngx-masonry/ngx-masonry.component.ts"],"sourcesContent":["/**\n * Generated bundle index. Do not edit.\n */\n\nexport {NgxMasonryModule,NgxMasonryComponent,NgxMasonryDirective,NgxMasonryOptions} from './index';\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n/*-- ngx-masonry --*/\n\nimport { NgxMasonryComponent } from './ngx-masonry.component';\nimport { NgxMasonryDirective } from './ngx-masonry.directive';\nexport class NgxMasonryModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n\timports: [\n\t\tCommonModule\n\t],\n\texports: [\n\t\tNgxMasonryComponent,\n\t\tNgxMasonryDirective\n\t],\n\tdeclarations: [\n\t\tNgxMasonryComponent,\n\t\tNgxMasonryDirective\n\t]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction NgxMasonryModule_tsickle_Closure_declarations() {\n/** @type {?} */\nNgxMasonryModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNgxMasonryModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Directive, Inject, ElementRef, forwardRef, OnDestroy, AfterViewInit, PLATFORM_ID } from '@angular/core';\n\nimport { NgxMasonryComponent } from './ngx-masonry.component';\nimport { isPlatformBrowser } from '@angular/common';\n\ninterface MutationWindow extends Window {\n\tMutationObserver: any;\n\tWebKitMutationObserver: any;\n}\n\ndeclare var window: MutationWindow;\nexport class NgxMasonryDirective implements OnDestroy, AfterViewInit {\n/**\n * @param {?} _element\n * @param {?} _parent\n * @param {?} platformId\n */\nconstructor(\nprivate _element: ElementRef,\nprivate _parent: NgxMasonryComponent,\nprivate platformId: any\n\t) {}\n/**\n * @return {?}\n */\nngAfterViewInit() {\n\t\tif (isPlatformBrowser(this.platformId)) {\n\t\t\tthis._parent.add(this._element.nativeElement);\n\t\t\tthis.watchForHtmlChanges();\n\t\t}\n\t}\n/**\n * @return {?}\n */\nngOnDestroy() {\n\t\tif (isPlatformBrowser(this.platformId)) {\n\t\t\tthis._parent.remove(this._element.nativeElement);\n\t\t}\n\t}\n/**\n * When HTML in brick changes dinamically, observe that and change layout\n * @return {?}\n */\nprivate watchForHtmlChanges(): void {\n\t\tMutationObserver = window.MutationObserver || window.WebKitMutationObserver;\n\n\t\tif (MutationObserver) {\n/**\n * Watch for any changes to subtree\n */\nlet self = this;\n\t\t\tlet /** @type {?} */ observer = new MutationObserver(function(mutations, observerFromElement) {\n\t\t\t\tself._parent.layout();\n\t\t\t});\n\n\t\t\t// define what element should be observed by the observer\n\t\t\t// and what types of mutations trigger the callback\n\t\t\tobserver.observe(this._element.nativeElement, {\n\t\t\t\tsubtree: true,\n\t\t\t\tchildList: true\n\t\t\t});\n\t\t}\n\t}\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n\tselector: '[ngx-masonry-item], ngx-masonry-item'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: NgxMasonryComponent, decorators: [{ type: Inject, args: [forwardRef(() => NgxMasonryComponent), ] }, ]},\n{type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID, ] }, ]},\n];\n}\n\nfunction NgxMasonryDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nNgxMasonryDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNgxMasonryDirective.ctorParameters;\n/** @type {?} */\nNgxMasonryDirective.prototype._element;\n/** @type {?} */\nNgxMasonryDirective.prototype._parent;\n/** @type {?} */\nNgxMasonryDirective.prototype.platformId;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {\n  Component,\n  OnInit,\n  OnChanges,\n  SimpleChanges,\n  OnDestroy,\n  Input,\n  Output,\n  ElementRef,\n  EventEmitter,\n  PLATFORM_ID,\n  Inject\n} from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\n\ndeclare var require: any;\nvar /** @type {?} */ imagesLoaded: any = undefined;\nvar /** @type {?} */ masonryConstructor: any = undefined;\n\nimport { NgxMasonryOptions } from './ngx-masonry-options.interface';\nexport class NgxMasonryComponent implements OnInit, OnChanges, OnDestroy {\n/**\n * @param {?} platformId\n * @param {?} _element\n */\nconstructor(\nprivate platformId: any,\nprivate _element: ElementRef) {}\npublic _msnry: any;\npublic options: NgxMasonryOptions;\npublic useImagesLoaded: Boolean = false;\n   updateLayout: Boolean = false;\n\n  // Outputs\n   layoutComplete: EventEmitter<any[]> = new EventEmitter<any[]>();\n   removeComplete: EventEmitter<any[]> = new EventEmitter<any[]>();\n/**\n * @return {?}\n */\nngOnInit() {\n    ///TODO: How to load imagesloaded only if this.useImagesLoaded===true?\n    if (this.useImagesLoaded && imagesLoaded === undefined) {\n      imagesLoaded = require('imagesloaded');\n    }\n\n    if (isPlatformBrowser(this.platformId) && masonryConstructor === undefined) {\n      masonryConstructor = require('masonry-layout');\n    }\n\n    // Create masonry options object\n    if (!this.options) this.options = {};\n\n    // Set default itemSelector\n    if (!this.options.itemSelector) {\n      this.options.itemSelector = '[ngx-masonry-item], ngx-masonry-item';\n    }\n\n    if (isPlatformBrowser(this.platformId)) {\n      // Initialize Masonry\n      this._msnry = new masonryConstructor(this._element.nativeElement, this.options);\n\n      // Bind to events\n      this._msnry.on('layoutComplete', (items: any) => {\n        this.layoutComplete.emit(items);\n      });\n      this._msnry.on('removeComplete', (items: any) => {\n        this.removeComplete.emit(items);\n      });\n    }\n  }\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: SimpleChanges) {\n    // only update layout if it's not the first change\n    if (changes.updateLayout) {\n      if (!changes.updateLayout.firstChange) {\n        this.layout();\n      }\n    }\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    if (this._msnry) {\n      this._msnry.destroy();\n    }\n  }\n/**\n * @return {?}\n */\npublic layout() {\n    setTimeout(() => {\n      this._msnry.layout();\n    });\n  }\n/**\n * @return {?}\n */\npublic reloadItems() {\n    setTimeout(() => {\n      this._msnry.reloadItems();\n    });\n  }\n/**\n * @param {?} element\n * @return {?}\n */\npublic add(element: HTMLElement) {\n    var /** @type {?} */ isFirstItem = false;\n\n    // Check if first item\n    if (this._msnry.items.length === 0) {\n      isFirstItem = true;\n    }\n\n    if (this.useImagesLoaded) {\n      imagesLoaded(element, (instance: any) => {\n        this._element.nativeElement.appendChild(element);\n\n        // Tell Masonry that a child element has been added\n        this._msnry.appended(element);\n\n        // layout if first item\n        if (isFirstItem) this.layout();\n      });\n\n      this._element.nativeElement.removeChild(element);\n    } else {\n      // Tell Masonry that a child element has been added\n      this._msnry.appended(element);\n\n      // layout if first item\n      if (isFirstItem) this.layout();\n    }\n  }\n/**\n * @param {?} element\n * @return {?}\n */\npublic remove(element: HTMLElement) {\n    // Tell Masonry that a child element has been removed\n    this._msnry.remove(element);\n\n    // Layout items\n    this.layout();\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: '[ngx-masonry], ngx-masonry',\n  template: '<ng-content></ng-content>',\n  styles: [\n    `\n\t\t:host {\n\t\t\tdisplay: block;\n\t\t}\n\t`\n  ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID, ] }, ]},\n{type: ElementRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'options': [{ type: Input },],\n'useImagesLoaded': [{ type: Input },],\n'updateLayout': [{ type: Input },],\n'layoutComplete': [{ type: Output },],\n'removeComplete': [{ type: Output },],\n};\n}\n\nfunction NgxMasonryComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nNgxMasonryComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNgxMasonryComponent.ctorParameters;\n/** @type {?} */\nNgxMasonryComponent.propDecorators;\n/** @type {?} */\nNgxMasonryComponent.prototype._msnry;\n/** @type {?} */\nNgxMasonryComponent.prototype.options;\n/** @type {?} */\nNgxMasonryComponent.prototype.useImagesLoaded;\n/** @type {?} */\nNgxMasonryComponent.prototype.updateLayout;\n/** @type {?} */\nNgxMasonryComponent.prototype.layoutComplete;\n/** @type {?} */\nNgxMasonryComponent.prototype.removeComplete;\n/** @type {?} */\nNgxMasonryComponent.prototype.platformId;\n/** @type {?} */\nNgxMasonryComponent.prototype._element;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"],"names":[],"mappings":"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"}
