"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Copyright 2017 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var chalk_1 = require("chalk");
var cp = require("child_process");
var inquirer = require("inquirer");
var path = require("path");
var util_1 = require("./util");
var pkg = require('../../package.json');
function query(message, question, defaultVal, options) {
    return __awaiter(this, void 0, void 0, function () {
        var answers;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (options.yes) {
                        return [2 /*return*/, true];
                    }
                    else if (options.no) {
                        return [2 /*return*/, false];
                    }
                    if (message) {
                        options.logger.log(message);
                    }
                    return [4 /*yield*/, inquirer.prompt({ type: 'confirm', name: 'query', message: question, default: defaultVal })];
                case 1:
                    answers = _a.sent();
                    return [2 /*return*/, answers.query];
            }
        });
    });
}
function addScripts(packageJson, options) {
    return __awaiter(this, void 0, void 0, function () {
        var edits, scripts, _i, _a, script, install, existing, target, message;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    edits = false;
                    scripts = {
                        check: "gts check",
                        clean: 'gts clean',
                        compile: "tsc -p .",
                        fix: "gts fix",
                        prepare: "npm run compile",
                        pretest: "npm run compile",
                        posttest: "npm run check"
                    };
                    if (!packageJson.scripts) {
                        packageJson.scripts = {};
                    }
                    _i = 0, _a = Object.keys(scripts);
                    _b.label = 1;
                case 1:
                    if (!(_i < _a.length)) return [3 /*break*/, 5];
                    script = _a[_i];
                    install = true;
                    existing = packageJson.scripts[script];
                    target = scripts[script];
                    if (!(existing !== target)) return [3 /*break*/, 4];
                    if (!existing) return [3 /*break*/, 3];
                    message = "package.json already has a script for " + chalk_1.default.bold(script) + ":\n" +
                        ("-" + chalk_1.default.red(existing) + "\n+" + chalk_1.default.green(target));
                    return [4 /*yield*/, query(message, 'Replace', false, options)];
                case 2:
                    install = _b.sent();
                    _b.label = 3;
                case 3:
                    if (install) {
                        packageJson.scripts[script] = scripts[script];
                        edits = true;
                    }
                    _b.label = 4;
                case 4:
                    _i++;
                    return [3 /*break*/, 1];
                case 5: return [2 /*return*/, edits];
            }
        });
    });
}
function addDependencies(packageJson, options) {
    return __awaiter(this, void 0, void 0, function () {
        var edits, deps, _i, _a, dep, install, existing, target, message;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    edits = false;
                    deps = { 'gts': "^" + pkg.version, 'typescript': '~2.6.1' };
                    if (!packageJson.devDependencies) {
                        packageJson.devDependencies = {};
                    }
                    _i = 0, _a = Object.keys(deps);
                    _b.label = 1;
                case 1:
                    if (!(_i < _a.length)) return [3 /*break*/, 5];
                    dep = _a[_i];
                    install = true;
                    existing = packageJson.devDependencies[dep];
                    target = deps[dep];
                    if (!(existing !== target)) return [3 /*break*/, 4];
                    if (!existing) return [3 /*break*/, 3];
                    message = "Already have devDependency for " + chalk_1.default.bold(dep) + ":\n" +
                        ("-" + chalk_1.default.red(existing) + "\n+" + chalk_1.default.green(target));
                    return [4 /*yield*/, query(message, 'Overwrite', false, options)];
                case 2:
                    install = _b.sent();
                    _b.label = 3;
                case 3:
                    if (install) {
                        packageJson.devDependencies[dep] = deps[dep];
                        edits = true;
                    }
                    _b.label = 4;
                case 4:
                    _i++;
                    return [3 /*break*/, 1];
                case 5: return [2 /*return*/, edits];
            }
        });
    });
}
function formatJson(object) {
    // TODO: preserve the indent from the input file.
    var json = JSON.stringify(object, null, '  ');
    return json + "\n";
}
function writePackageJson(packageJson, options) {
    return __awaiter(this, void 0, void 0, function () {
        var preview;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    options.logger.log('Writing package.json...');
                    if (!!options.dryRun) return [3 /*break*/, 2];
                    return [4 /*yield*/, util_1.writeFileAtomicp('./package.json', formatJson(packageJson))];
                case 1:
                    _a.sent();
                    _a.label = 2;
                case 2:
                    preview = {
                        scripts: packageJson.scripts,
                        devDependencies: packageJson.devDependencies
                    };
                    options.logger.dir(preview);
                    return [2 /*return*/];
            }
        });
    });
}
function generateTsConfig(options) {
    return __awaiter(this, void 0, void 0, function () {
        var existing, err_1, baseConfig, tsconfig, writeTsConfig;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 2, , 3]);
                    return [4 /*yield*/, util_1.readFilep('./tsconfig.json', 'utf8')];
                case 1:
                    existing = _a.sent();
                    return [3 /*break*/, 3];
                case 2:
                    err_1 = _a.sent();
                    if (err_1.code === 'ENOENT') {
                        /* not found, create it. */
                    }
                    else {
                        throw new Error("Unknown error reading tsconfig.json: " + err_1.message);
                    }
                    return [3 /*break*/, 3];
                case 3:
                    baseConfig = './' +
                        path.relative(options.targetRootDir, path.resolve(options.gtsRootDir, 'tsconfig-google.json'));
                    tsconfig = formatJson({
                        extends: baseConfig,
                        compilerOptions: { rootDir: '.', outDir: 'build' },
                        include: ['src/*.ts', 'src/**/*.ts', 'test/*.ts', 'test/**/*.ts'],
                        exclude: ['node_modules']
                    });
                    writeTsConfig = true;
                    if (!(existing && existing === tsconfig)) return [3 /*break*/, 4];
                    options.logger.log('No edits needed in tsconfig.json.');
                    return [2 /*return*/];
                case 4:
                    if (!existing) return [3 /*break*/, 6];
                    return [4 /*yield*/, query(chalk_1.default.bold('tsconfig.json') + " already exists", 'Overwrite', false, options)];
                case 5:
                    writeTsConfig = _a.sent();
                    _a.label = 6;
                case 6:
                    if (!writeTsConfig) return [3 /*break*/, 9];
                    options.logger.log('Writing tsconfig.json...');
                    if (!!options.dryRun) return [3 /*break*/, 8];
                    return [4 /*yield*/, util_1.writeFileAtomicp('./tsconfig.json', tsconfig)];
                case 7:
                    _a.sent();
                    _a.label = 8;
                case 8:
                    options.logger.dir(JSON.parse(tsconfig));
                    _a.label = 9;
                case 9: return [2 /*return*/];
            }
        });
    });
}
function init(options) {
    return __awaiter(this, void 0, void 0, function () {
        var packageJson, err_2, generate, err2_1, addedDeps, addedScripts;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 2, , 8]);
                    return [4 /*yield*/, util_1.readJsonp('./package.json')];
                case 1:
                    packageJson = _a.sent();
                    return [3 /*break*/, 8];
                case 2:
                    err_2 = _a.sent();
                    if (err_2.code !== 'ENOENT') {
                        throw new Error("Unable to open package.json file: " + err_2.message);
                    }
                    return [4 /*yield*/, query(chalk_1.default.bold('package.json') + " does not exist.", "Generate", true, options)];
                case 3:
                    generate = _a.sent();
                    if (!generate) {
                        options.logger.log('Please run from a directory with your package.json.');
                        return [2 /*return*/, false];
                    }
                    _a.label = 4;
                case 4:
                    _a.trys.push([4, 6, , 7]);
                    // TODO(ofrobots): add proper error handling.
                    cp.spawnSync('npm', ['init', '-y']);
                    return [4 /*yield*/, util_1.readJsonp('./package.json')];
                case 5:
                    packageJson = _a.sent();
                    return [3 /*break*/, 7];
                case 6:
                    err2_1 = _a.sent();
                    throw err2_1;
                case 7: return [3 /*break*/, 8];
                case 8: return [4 /*yield*/, addDependencies(packageJson, options)];
                case 9:
                    addedDeps = _a.sent();
                    return [4 /*yield*/, addScripts(packageJson, options)];
                case 10:
                    addedScripts = _a.sent();
                    if (!(addedDeps || addedScripts)) return [3 /*break*/, 12];
                    return [4 /*yield*/, writePackageJson(packageJson, options)];
                case 11:
                    _a.sent();
                    return [3 /*break*/, 13];
                case 12:
                    options.logger.log('No edits needed in package.json.');
                    _a.label = 13;
                case 13: return [4 /*yield*/, generateTsConfig(options)];
                case 14:
                    _a.sent();
                    // Run `npm install` after initial setup so `npm run check` works right away.
                    if (!options.dryRun) {
                        cp.spawnSync('npm', ['install'], { stdio: 'inherit' });
                    }
                    return [2 /*return*/, true];
            }
        });
    });
}
exports.init = init;
//# sourceMappingURL=init.js.map