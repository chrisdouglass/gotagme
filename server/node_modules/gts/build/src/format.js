"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var lint_1 = require("./lint");
var clangFormat = require('clang-format');
var baseArgs = ['-style', '{Language: JavaScript, BasedOnStyle: Google, ColumnLimit: 80}'];
/**
 * Run tslint fix and clang fix with the default configuration
 * @param options
 * @param fix whether to automatically fix the format
 * @param files files to format
 */
function format(options, files, fix) {
    if (files === void 0) { files = []; }
    if (fix === void 0) { fix = false; }
    return __awaiter(this, void 0, void 0, function () {
        var program, srcFiles, result;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    program = lint_1.createProgram(options);
                    srcFiles = files.length > 0 ?
                        files :
                        program.getRootFileNames().filter(function (f) { return !f.endsWith('.d.ts'); });
                    if (!fix) return [3 /*break*/, 2];
                    return [4 /*yield*/, fixFormat(srcFiles)];
                case 1: return [2 /*return*/, _a.sent()];
                case 2: return [4 /*yield*/, checkFormat(srcFiles)];
                case 3:
                    result = _a.sent();
                    if (!result) {
                        options.logger.log('clang-format reported errors... run `gts fix` to address.');
                    }
                    return [2 /*return*/, result];
            }
        });
    });
}
exports.format = format;
/**
 * Runs clang-format to automatically fix the format of supplied files.
 *
 * @param srcFiles list of source files
 */
function fixFormat(srcFiles) {
    return new Promise(function (resolve, reject) {
        var args = baseArgs.concat(['-i'], srcFiles);
        clangFormat.spawnClangFormat(args, function (err) {
            if (err) {
                reject(err);
            }
            else {
                resolve(true);
            }
        }, 'inherit');
    });
}
/**
 * Runs clang-format on the list of files and checks whether they are formatted
 * correctly. Returns true if all files are formatted correctly.
 *
 * @param srcFiles list of source files
 */
function checkFormat(srcFiles) {
    return new Promise(function (resolve, reject) {
        var output = '';
        var args = baseArgs.concat(['-output-replacements-xml'], srcFiles);
        var out = clangFormat
            .spawnClangFormat(args, function (err) {
            if (err) {
                reject(err);
            }
        }, ['ignore', 'pipe', process.stderr])
            .stdout;
        out.setEncoding('utf8');
        out.on('data', function (data) {
            output += data;
        });
        out.on('end', function () {
            resolve(output.indexOf('<replacement ') === -1 ? true : false);
        });
    });
}
//# sourceMappingURL=format.js.map