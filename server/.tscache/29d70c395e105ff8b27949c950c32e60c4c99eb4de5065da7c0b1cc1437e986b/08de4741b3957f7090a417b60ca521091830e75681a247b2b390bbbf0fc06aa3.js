require('dotenv').load(); // Load env as early as possible.
// Set the promises used by Mongoose.
require('mongoose').Promise = require('bluebird');
var express = require('express');
var path = require('path');
var http = require('http');
var favicon = require('serve-favicon');
var logger = require('morgan');
var bodyParser = require('body-parser');
var app = express();
// express-session setup.
// require('./server/src/config/session')(app);
// Passport setup.
require('./server/src/config/passport')(app);
// TODO: Add Helmet for prod.
// Configure app-wide middleware.
//app.use(favicon(path.join(__dirname, 'public', 'favicon.ico')));
app.use(logger('dev'));
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: false }));
app.use(express.static(path.join(__dirname, 'dist')));
// Routes.
var api = require('./server/src/routes/api');
app.use('/api', api);
// Catch all other routes and return the index file
app.get('*', function (req, res) {
    res.sendFile(path.join(__dirname, 'dist/index.html'));
});
// Error Handlers
require('./server/src/config/error')(app);
// Create HTTP server and listen on provided port on all network interfaces.
var server = http.createServer(app);
var port = '3000';
app.set('port', port);
server.listen(port, function () { return console.log("API running on localhost:" + port); });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL2NoYW5jZS9Qcm9qZWN0cy9nb3RhZ21lL3NlcnZlci9zZXJ2ZXIudHMiLCJzb3VyY2VzIjpbIi9Vc2Vycy9jaGFuY2UvUHJvamVjdHMvZ290YWdtZS9zZXJ2ZXIvc2VydmVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLGlDQUFpQztBQUUzRCxxQ0FBcUM7QUFDckMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUM7QUFFbEQsSUFBTSxPQUFPLEdBQUcsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0FBQ25DLElBQU0sSUFBSSxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUM3QixJQUFNLElBQUksR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDN0IsSUFBTSxPQUFPLEdBQUcsT0FBTyxDQUFDLGVBQWUsQ0FBQyxDQUFDO0FBQ3pDLElBQU0sTUFBTSxHQUFHLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUNqQyxJQUFNLFVBQVUsR0FBRyxPQUFPLENBQUMsYUFBYSxDQUFDLENBQUM7QUFFMUMsSUFBTSxHQUFHLEdBQUcsT0FBTyxFQUFFLENBQUM7QUFFdEIseUJBQXlCO0FBQ3pCLCtDQUErQztBQUUvQyxrQkFBa0I7QUFDbEIsT0FBTyxDQUFDLDhCQUE4QixDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7QUFFN0MsNkJBQTZCO0FBRTdCLGlDQUFpQztBQUNqQyxrRUFBa0U7QUFDbEUsR0FBRyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztBQUN2QixHQUFHLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDO0FBQzNCLEdBQUcsQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLFVBQVUsQ0FBQyxFQUFFLFFBQVEsRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUM7QUFDcEQsR0FBRyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUV0RCxVQUFVO0FBQ1YsSUFBTSxHQUFHLEdBQUcsT0FBTyxDQUFDLHlCQUF5QixDQUFDLENBQUM7QUFDL0MsR0FBRyxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsR0FBRyxDQUFDLENBQUM7QUFFckIsbURBQW1EO0FBQ25ELEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLFVBQUMsR0FBRyxFQUFFLEdBQUc7SUFDcEIsR0FBRyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxpQkFBaUIsQ0FBQyxDQUFDLENBQUM7QUFDeEQsQ0FBQyxDQUFDLENBQUM7QUFFSCxpQkFBaUI7QUFDakIsT0FBTyxDQUFDLDJCQUEyQixDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7QUFFMUMsNEVBQTRFO0FBQzVFLElBQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDdEMsSUFBTSxJQUFJLEdBQUcsTUFBTSxDQUFDO0FBQ3BCLEdBQUcsQ0FBQyxHQUFHLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxDQUFDO0FBQ3RCLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLGNBQU0sT0FBQSxPQUFPLENBQUMsR0FBRyxDQUFDLDhCQUE0QixJQUFNLENBQUMsRUFBL0MsQ0FBK0MsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsicmVxdWlyZSgnZG90ZW52JykubG9hZCgpOyAvLyBMb2FkIGVudiBhcyBlYXJseSBhcyBwb3NzaWJsZS5cblxuLy8gU2V0IHRoZSBwcm9taXNlcyB1c2VkIGJ5IE1vbmdvb3NlLlxucmVxdWlyZSgnbW9uZ29vc2UnKS5Qcm9taXNlID0gcmVxdWlyZSgnYmx1ZWJpcmQnKTtcblxuY29uc3QgZXhwcmVzcyA9IHJlcXVpcmUoJ2V4cHJlc3MnKTtcbmNvbnN0IHBhdGggPSByZXF1aXJlKCdwYXRoJyk7XG5jb25zdCBodHRwID0gcmVxdWlyZSgnaHR0cCcpO1xuY29uc3QgZmF2aWNvbiA9IHJlcXVpcmUoJ3NlcnZlLWZhdmljb24nKTtcbmNvbnN0IGxvZ2dlciA9IHJlcXVpcmUoJ21vcmdhbicpO1xuY29uc3QgYm9keVBhcnNlciA9IHJlcXVpcmUoJ2JvZHktcGFyc2VyJyk7XG5cbmNvbnN0IGFwcCA9IGV4cHJlc3MoKTtcblxuLy8gZXhwcmVzcy1zZXNzaW9uIHNldHVwLlxuLy8gcmVxdWlyZSgnLi9zZXJ2ZXIvc3JjL2NvbmZpZy9zZXNzaW9uJykoYXBwKTtcblxuLy8gUGFzc3BvcnQgc2V0dXAuXG5yZXF1aXJlKCcuL3NlcnZlci9zcmMvY29uZmlnL3Bhc3Nwb3J0JykoYXBwKTtcblxuLy8gVE9ETzogQWRkIEhlbG1ldCBmb3IgcHJvZC5cblxuLy8gQ29uZmlndXJlIGFwcC13aWRlIG1pZGRsZXdhcmUuXG4vL2FwcC51c2UoZmF2aWNvbihwYXRoLmpvaW4oX19kaXJuYW1lLCAncHVibGljJywgJ2Zhdmljb24uaWNvJykpKTtcbmFwcC51c2UobG9nZ2VyKCdkZXYnKSk7XG5hcHAudXNlKGJvZHlQYXJzZXIuanNvbigpKTtcbmFwcC51c2UoYm9keVBhcnNlci51cmxlbmNvZGVkKHsgZXh0ZW5kZWQ6IGZhbHNlIH0pKTtcbmFwcC51c2UoZXhwcmVzcy5zdGF0aWMocGF0aC5qb2luKF9fZGlybmFtZSwgJ2Rpc3QnKSkpO1xuXG4vLyBSb3V0ZXMuXG5jb25zdCBhcGkgPSByZXF1aXJlKCcuL3NlcnZlci9zcmMvcm91dGVzL2FwaScpO1xuYXBwLnVzZSgnL2FwaScsIGFwaSk7XG5cbi8vIENhdGNoIGFsbCBvdGhlciByb3V0ZXMgYW5kIHJldHVybiB0aGUgaW5kZXggZmlsZVxuYXBwLmdldCgnKicsIChyZXEsIHJlcykgPT4ge1xuICByZXMuc2VuZEZpbGUocGF0aC5qb2luKF9fZGlybmFtZSwgJ2Rpc3QvaW5kZXguaHRtbCcpKTtcbn0pO1xuXG4vLyBFcnJvciBIYW5kbGVyc1xucmVxdWlyZSgnLi9zZXJ2ZXIvc3JjL2NvbmZpZy9lcnJvcicpKGFwcCk7XG5cbi8vIENyZWF0ZSBIVFRQIHNlcnZlciBhbmQgbGlzdGVuIG9uIHByb3ZpZGVkIHBvcnQgb24gYWxsIG5ldHdvcmsgaW50ZXJmYWNlcy5cbmNvbnN0IHNlcnZlciA9IGh0dHAuY3JlYXRlU2VydmVyKGFwcCk7XG5jb25zdCBwb3J0ID0gJzMwMDAnO1xuYXBwLnNldCgncG9ydCcsIHBvcnQpO1xuc2VydmVyLmxpc3Rlbihwb3J0LCAoKSA9PiBjb25zb2xlLmxvZyhgQVBJIHJ1bm5pbmcgb24gbG9jYWxob3N0OiR7cG9ydH1gKSk7XG4iXX0=