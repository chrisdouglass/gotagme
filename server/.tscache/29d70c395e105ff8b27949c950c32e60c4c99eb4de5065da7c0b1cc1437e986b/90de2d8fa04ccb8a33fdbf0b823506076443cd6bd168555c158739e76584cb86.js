require('dotenv').load(); // Load env as early as possible.
// Set the promises used by Mongoose.
require('mongoose').Promise = require('bluebird');
var express = require('express');
var path = require('path');
var http = require('http');
var favicon = require('serve-favicon');
var logger = require('morgan');
var bodyParser = require('body-parser');
var app = express();
// express-session setup.
// require('./server/src/config/session')(app);
// Passport setup.
require('./src/config/passport')(app);
// TODO: Add Helmet for prod.
// Configure app-wide middleware.
//app.use(favicon(path.join(__dirname, 'public', 'favicon.ico')));
app.use(logger('dev'));
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: false }));
app.use(express.static(path.join(__dirname, 'dist')));
// Routes.
var api = require('./src/routes/api');
app.use('/api', api);
// Catch all other routes and return the index file
app.get('*', function (req, res, next) {
    next(new Error('Not allowed.'));
    // res.sendFile(path.join(__dirname, 'dist/index.html'));
});
// Error Handlers
require('./src/config/error')(app);
// Create HTTP server and listen on provided port on all network interfaces.
var server = http.createServer(app);
var port = '3000';
app.set('port', port);
server.listen(port, function () { return console.log("API running on localhost:" + port); });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL2NoYW5jZS9Qcm9qZWN0cy9nb3RhZ21lL3NlcnZlci9zZXJ2ZXIudHMiLCJzb3VyY2VzIjpbIi9Vc2Vycy9jaGFuY2UvUHJvamVjdHMvZ290YWdtZS9zZXJ2ZXIvc2VydmVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLGlDQUFpQztBQUUzRCxxQ0FBcUM7QUFDckMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUM7QUFFbEQsSUFBTSxPQUFPLEdBQUcsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0FBQ25DLElBQU0sSUFBSSxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUM3QixJQUFNLElBQUksR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDN0IsSUFBTSxPQUFPLEdBQUcsT0FBTyxDQUFDLGVBQWUsQ0FBQyxDQUFDO0FBQ3pDLElBQU0sTUFBTSxHQUFHLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUNqQyxJQUFNLFVBQVUsR0FBRyxPQUFPLENBQUMsYUFBYSxDQUFDLENBQUM7QUFFMUMsSUFBTSxHQUFHLEdBQUcsT0FBTyxFQUFFLENBQUM7QUFFdEIseUJBQXlCO0FBQ3pCLCtDQUErQztBQUUvQyxrQkFBa0I7QUFDbEIsT0FBTyxDQUFDLHVCQUF1QixDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7QUFFdEMsNkJBQTZCO0FBRTdCLGlDQUFpQztBQUNqQyxrRUFBa0U7QUFDbEUsR0FBRyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztBQUN2QixHQUFHLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDO0FBQzNCLEdBQUcsQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLFVBQVUsQ0FBQyxFQUFFLFFBQVEsRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUM7QUFDcEQsR0FBRyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUV0RCxVQUFVO0FBQ1YsSUFBTSxHQUFHLEdBQUcsT0FBTyxDQUFDLGtCQUFrQixDQUFDLENBQUM7QUFDeEMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsR0FBRyxDQUFDLENBQUM7QUFFckIsbURBQW1EO0FBQ25ELEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLFVBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxJQUFJO0lBQzFCLElBQUksQ0FBQyxJQUFJLEtBQUssQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDO0lBQ2hDLHlEQUF5RDtBQUMzRCxDQUFDLENBQUMsQ0FBQztBQUVILGlCQUFpQjtBQUNqQixPQUFPLENBQUMsb0JBQW9CLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUVuQyw0RUFBNEU7QUFDNUUsSUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUN0QyxJQUFNLElBQUksR0FBRyxNQUFNLENBQUM7QUFDcEIsR0FBRyxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUM7QUFDdEIsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsY0FBTSxPQUFBLE9BQU8sQ0FBQyxHQUFHLENBQUMsOEJBQTRCLElBQU0sQ0FBQyxFQUEvQyxDQUErQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJyZXF1aXJlKCdkb3RlbnYnKS5sb2FkKCk7IC8vIExvYWQgZW52IGFzIGVhcmx5IGFzIHBvc3NpYmxlLlxuXG4vLyBTZXQgdGhlIHByb21pc2VzIHVzZWQgYnkgTW9uZ29vc2UuXG5yZXF1aXJlKCdtb25nb29zZScpLlByb21pc2UgPSByZXF1aXJlKCdibHVlYmlyZCcpO1xuXG5jb25zdCBleHByZXNzID0gcmVxdWlyZSgnZXhwcmVzcycpO1xuY29uc3QgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKTtcbmNvbnN0IGh0dHAgPSByZXF1aXJlKCdodHRwJyk7XG5jb25zdCBmYXZpY29uID0gcmVxdWlyZSgnc2VydmUtZmF2aWNvbicpO1xuY29uc3QgbG9nZ2VyID0gcmVxdWlyZSgnbW9yZ2FuJyk7XG5jb25zdCBib2R5UGFyc2VyID0gcmVxdWlyZSgnYm9keS1wYXJzZXInKTtcblxuY29uc3QgYXBwID0gZXhwcmVzcygpO1xuXG4vLyBleHByZXNzLXNlc3Npb24gc2V0dXAuXG4vLyByZXF1aXJlKCcuL3NlcnZlci9zcmMvY29uZmlnL3Nlc3Npb24nKShhcHApO1xuXG4vLyBQYXNzcG9ydCBzZXR1cC5cbnJlcXVpcmUoJy4vc3JjL2NvbmZpZy9wYXNzcG9ydCcpKGFwcCk7XG5cbi8vIFRPRE86IEFkZCBIZWxtZXQgZm9yIHByb2QuXG5cbi8vIENvbmZpZ3VyZSBhcHAtd2lkZSBtaWRkbGV3YXJlLlxuLy9hcHAudXNlKGZhdmljb24ocGF0aC5qb2luKF9fZGlybmFtZSwgJ3B1YmxpYycsICdmYXZpY29uLmljbycpKSk7XG5hcHAudXNlKGxvZ2dlcignZGV2JykpO1xuYXBwLnVzZShib2R5UGFyc2VyLmpzb24oKSk7XG5hcHAudXNlKGJvZHlQYXJzZXIudXJsZW5jb2RlZCh7IGV4dGVuZGVkOiBmYWxzZSB9KSk7XG5hcHAudXNlKGV4cHJlc3Muc3RhdGljKHBhdGguam9pbihfX2Rpcm5hbWUsICdkaXN0JykpKTtcblxuLy8gUm91dGVzLlxuY29uc3QgYXBpID0gcmVxdWlyZSgnLi9zcmMvcm91dGVzL2FwaScpO1xuYXBwLnVzZSgnL2FwaScsIGFwaSk7XG5cbi8vIENhdGNoIGFsbCBvdGhlciByb3V0ZXMgYW5kIHJldHVybiB0aGUgaW5kZXggZmlsZVxuYXBwLmdldCgnKicsIChyZXEsIHJlcywgbmV4dCkgPT4ge1xuICBuZXh0KG5ldyBFcnJvcignTm90IGFsbG93ZWQuJykpO1xuICAvLyByZXMuc2VuZEZpbGUocGF0aC5qb2luKF9fZGlybmFtZSwgJ2Rpc3QvaW5kZXguaHRtbCcpKTtcbn0pO1xuXG4vLyBFcnJvciBIYW5kbGVyc1xucmVxdWlyZSgnLi9zcmMvY29uZmlnL2Vycm9yJykoYXBwKTtcblxuLy8gQ3JlYXRlIEhUVFAgc2VydmVyIGFuZCBsaXN0ZW4gb24gcHJvdmlkZWQgcG9ydCBvbiBhbGwgbmV0d29yayBpbnRlcmZhY2VzLlxuY29uc3Qgc2VydmVyID0gaHR0cC5jcmVhdGVTZXJ2ZXIoYXBwKTtcbmNvbnN0IHBvcnQgPSAnMzAwMCc7XG5hcHAuc2V0KCdwb3J0JywgcG9ydCk7XG5zZXJ2ZXIubGlzdGVuKHBvcnQsICgpID0+IGNvbnNvbGUubG9nKGBBUEkgcnVubmluZyBvbiBsb2NhbGhvc3Q6JHtwb3J0fWApKTtcbiJdfQ==